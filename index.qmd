---
title: The title of your Semesterproject
subtitle: A subtle subtitle
author: Cyril Geistlich and Micha Franz
output: html
editor: visual
  markdown: 
    wrap: 72
---

<!-- You can add  your R Code with Code chunks-->

```{r}
#| echo: false
#| warning: false
#| message: false

# You can set chunk options individually per code chunk, as was done with this
# code chunk.

# echo: false           hides the code from the generated output
# warning: false        hides warnings from the generated output
# message: false        hides messages from the generated output

# To apply the setting for all code chunks, add the options to the yaml header of the document (in between the ---) without the preceeding "#|".

```

## Abstract

This project aims to investigate key factors and features in GPS tracking data to differentiate transportation vehicles. Machine learning is applied to automate transportation mode detection using spatial, temporal, and attribute analysis. Manual verification of results ensures accuracy. The findings contribute to computational movement analysis and automated transportation mode detection.

## Introduction

## Research Question

What are the key factors and features that can be extracted from GPS tracking data to differentiate between different types of transportation modes? How can machine learning techniques be applied to GPS tracking data to automate the detection of the mode of transportation and which accuracies can be achieved by different machine learning algorithms?

## Material and Methods

<!-- the following is just a placeholder text, remove it!-->

Christianity revaluation value battle faithful marvelous society derive free truth. Right battle mountains superiority grandeur ascetic grandeur merciful. Derive against intentions burying salvation ocean. Right intentions dead victorious ideal spirit evil ultimate joy. Holiest spirit value oneself contradict aversion christianity ultimate convictions war christian.

## Results

<!-- the following is just a placeholder text, remove it!-->

Philosophy oneself passion play fearful self noble zarathustra deceptions sexuality. Endless ocean of oneself dead ocean. Selfish decrepit.

## Discussion

<!-- the following is just a placeholder text, remove it!-->

Justice convictions spirit sexuality insofar free marvelous joy. Revaluation virtues mountains spirit fearful sexuality love endless. Society intentions will noble burying aversion moral. Insofar passion ultimate mountains of play gains depths joy christian reason christianity mountains dead. Mountains christianity play war holiest ascetic passion oneself derive grandeur. Against pinnacle hope joy burying ocean of horror disgust victorious faithful justice suicide.

## Code

```{r}
library("dplyr")
library("sf")
library("readr") 
library("ggplot2") # to visualize data
library("mapview")
library("lubridate")
library("zoo") 
# library("caret") # Classification package
#CNN
library("neuralnet")
# library("keras")
# library("tensorflow")
library("LearnGeom")
```

## supporting functions

```{r}
custom_mapview <- function(sf_object){
  mapview(sf_object, cex = 4, col.regions = "#700101")
}


point2line <- function(points){
  geometries <- st_cast(st_geometry(points %>% select(geometry)), "POINT")
  n <- length(geometries) - 1
  linestrings <- lapply(X = 1:n, FUN = function(x) {

  pair <- st_combine(c(geometries[x], geometries[x + 1]))
  line <- st_cast(pair, "LINESTRING")
  return(line)
  })
  
  multilinetring <- st_multilinestring(do.call("rbind", linestrings))
  
  df <- data.frame(linestrings[1])
  
  for (i in 2:length(linestrings)){
    temp <- data.frame(linestrings[i])
    df <-  rbind(df, temp) 
  }
  sf_lines <- df %>% st_as_sf()
}
```

# 1. Data Prep

## 1.1 Read Data

```{r read data}
#posmo_truth_csv <- read.delim("data/posmo_full.csv",sep=",")
posmo_micha_truth_csv <- read.delim("data/manually_labelled/posmo_20230502_to_20230613_m.csv",sep=",") 
posmo_micha_csv <- read.delim("data/posmo_labelled/posmo_20230502_to_20230613_p.csv",sep=",") 
```

## 1.2 Clean and preprocess data

```{r preprocess data}

# posmo_raw <- read.delim("data/posmo_26_05_2023.csv",sep=",")
# posmo_raw <- st_as_sf(posmo_raw,coords=c("lon_x", "lat_y"), crs = 2056)
#mapview(posmo_truth)

process_posmo_data <- function(posmo_data) { # function with preprocessing steps

  # Convert to sf object
  posmo_data <- posmo_data %>%
    st_as_sf(coords = c("lon_x", "lat_y"), crs = 4326) %>%
    st_transform(crs = 2056)
  
  # Remove unwanted columns
  posmo_data <- posmo_data[, -c(1, 3, 4)]
  
  # Fix Timestamp
  posmo_data$datetime <- ymd_hms(posmo_data$datetime) + hours(2)
  
  # Add ID to rows
  posmo_data <- posmo_data %>%
    mutate(id = row_number())
  
  # remove duplicate time values
  posmo_data <- posmo_data[!duplicated(posmo_data$datetime), ]
  
  # remove subsequent duplicate location 
  posmo_data <- posmo_data %>% 
    filter(geometry != lead(geometry))
  
  return(posmo_data)
}

#posmo_truth <- process_posmo_data(posmo_truth_csv)
```

```{r datasets}
posmo_micha_truth <- process_posmo_data(posmo_micha_truth_csv)

posmo_micha <-  process_posmo_data(posmo_micha_csv)

micha_subset <- posmo_micha_truth %>% filter(datetime < ymd("20230503")) %>% head(60)

working_dataset <- micha_subset
```

## 1.3 Segmentation?

```{r}
```

## 1.4 Calculate Movement Parameters

### 1.4.1 Speed/ Additional Moving Window Speed?

```{r Calc Diff_s, steplength, velocity}
#Create Coord Column
coords <- data.frame(st_coordinates(working_dataset), working_dataset$id)

#Calculate Time Difference between steps (diff_s), steplenght and velocity. 
working_dataset <- working_dataset |> 
  mutate(diff_s = as.numeric(difftime(lead(datetime),datetime))) |>
  mutate(steplength = ((coords$X - lead(coords$X))^2 + (coords$Y - lead(coords$Y))^2)^0.5) |>
  mutate(velocity = as.numeric(steplength/diff_s)) |>
  filter(diff_s != 0)

coords <- data.frame(st_coordinates(working_dataset), working_dataset$id)

#Calculate Moving Window Step length
working_dataset <- working_dataset |>
  mutate(
    step_mean = rowMeans(
      cbind(
        sqrt((lag(coords$X, 3) - coords$X)^2 + (lag(coords$Y, 3) - coords$Y)^2),
        sqrt((lag(coords$X, 2) - coords$X)^2 + (lag(coords$Y, 2) - coords$Y)^2),
        sqrt((lag(coords$X, 1) - coords$X)^2 + (lag(coords$Y, 1) - coords$Y)^2),
        sqrt((coords$X - lead(coords$X, 1))^2 + (coords$Y - lead(coords$Y, 1))^2),
        sqrt((coords$X - lead(coords$X, 2))^2 + (coords$Y - lead(coords$Y, 2))^2),
        sqrt((coords$X - lead(coords$X, 3))^2 + (coords$Y - lead(coords$Y, 3))^2)
      )
    )
  )


#Calculate Moving Window diff_s
working_dataset <- working_dataset |>
  mutate(diff_s_mean = as.numeric(difftime(lead(datetime,3),lag(datetime,3)))/6)


#Calculate Moving Window velocity
working_dataset <- working_dataset |>
  mutate(velocity_mean = as.numeric(step_mean/diff_s_mean))
 
# Delete Infitinte Values (is there better solution?)
#working_dataset$velocity <- working_dataset$velocity[!is.infinite(working_dataset$velocity)]
coords <- data.frame(st_coordinates(working_dataset), working_dataset$id)


```

### 1.4.2 Acceleration /Moving Window?

```{r Acceleration}
#Acceleration stepwise
working_dataset$acceleration <- working_dataset$velocity/lag(working_dataset$diff_s)

# Calculate acceleration using a moving window
working_dataset <- working_dataset |>
  mutate(
    acceleration_mean = rowMeans(
      cbind(
        lag(working_dataset$acceleration,3),
        lag(working_dataset$acceleration,2),
        lag(working_dataset$acceleration,1),
        working_dataset$acceleration,
        lead(working_dataset$acceleration,1),
        lead(working_dataset$acceleration,2),
        lead(working_dataset$acceleration,3)
      )
    )
  )


```

### 1.4.3 Sinuosity /Moving Window?

```{r Sinuosity}
# Calculate Sinuosity using moving step_mean as path length and euclidean distance between


working_dataset <- working_dataset |>
  mutate(
    sinuosity = 
      ( # Path Length/Direct distance between first and last point
        sqrt((lag(coords$X, 3) - lag(coords$X, 2))^2 + (lag(coords$Y, 3) - lag(coords$Y, 2))^2) +
        sqrt((lag(coords$X, 2) - lag(coords$X, 1))^2 + (lag(coords$Y, 2) - lag(coords$Y, 1))^2) +
        sqrt((lag(coords$X, 1) - coords$X)^2 + (lag(coords$Y, 1) - coords$Y)^2) +
        sqrt((coords$X - lead(coords$X, 1))^2 + (coords$Y - lead(coords$Y, 1))^2) +
        sqrt((lead(coords$X, 1) - lead(coords$X, 2))^2 + (lead(coords$Y, 1) - lead(coords$Y, 2))^2) +
        sqrt((lead(coords$X, 2) - lead(coords$X, 3))^2 + (lead(coords$Y, 2) - lead(coords$Y, 3))^2)
      ) 
      / sqrt((lag(coords$X, 3) - lead(coords$X, 3))^2 + (lag(coords$Y, 3) - lead(coords$Y, 3))^2)
  ) 

```

### 1.4.4 Angle

```{r}

getAngle <- function(coords) {
  angles <- numeric(nrow(coords)) # Initialize angles as a numeric vector
  angles[1] = NA

  for (i in 2:(nrow(coords) - 1)) {
    angle <- Angle(
      c(coords[i - 1, "X"], coords[i - 1, "Y"]),
      c(coords[i, "X"], coords[i, "Y"]),
      c(coords[i + 1, "X"], coords[i + 1, "Y"])
    )
    angles[i] <- angle # Assign the calculated angle to the corresponding index in angles
  }
  angles[nrow(coords)] = NA
  return(c(angles))
}

working_dataset$angle <- getAngle(coords)
```

### 1.4.5 Closeness to Traffic Network

### 1.4.6 Water Bodies (For boats)

### 1.4.7 Slope?

### 1.4.8 Average Distance between points in section

### Further Parameters!

### Tests to identify GPS spoofing (false movement)

```{r}
working_dataset_line <- point2line(working_dataset)

#working_dataset$error <- working_dataset$sinuosity > 3

mapview(working_dataset, zcol="angle") +
  mapview(working_dataset_line, color="black")


working_dataset[5:7,] %>% st_coordinates()
working_dataset[5:7,] $id






# Calculate the angle between the coordinates


# Convert the angle from radians to degrees
angle_degrees <- angle 

# Display the angle in degrees
print(angle_degrees)
```


## Clean Data

```{r}
# Replace NA values with a specified value (e.g., mean, median, or 0)
working_dataset[is.na(working_dataset)] <- 0  # Replace NA with 0


velocity_plot <- ggplot(working_dataset, aes(id,velocity)) +
  geom_point() +
  ylab("velocity [m/s]")

acceleration_plot <- ggplot(working_dataset, aes(id,acceleration)) +
  geom_point() +
  ylab("acceleration [m/s2]")

sinuosity_plot <- ggplot(working_dataset, aes(id,sinuosity)) +
  geom_point()

# ggsave("plots/velocity_plot.png", plot = velocity_plot, width = 8, height = 6, dpi = 300)
# ggsave("plots/acceleration_plot.png", plot = acceleration_plot, width = 8, height = 6, dpi = 300)
# ggsave("plots/sinuosity_plot.png", plot = sinuosity_plot, width = 8, height = 6, dpi = 300)
```

```{r}
working_dataset <- working_dataset[working_dataset$velocity < 250,]
working_dataset <- working_dataset[working_dataset$sinuosity < 5,]
working_dataset <- working_dataset[working_dataset$acceleration < 20,]
working_dataset <- working_dataset[working_dataset$diff_s < 1000,]
```

# 2.PCA?

# 3. Categories

Stationary? Walk (Running?) Bike Train Tram Bus Car Skateboard E-Scooter Boat Other

# 4. Cluster

# 5. Random Forest (RF)

```{r RF}
```

# 5. ANN

```{r Convolutional Neural Network (CNN)}
# We use a CNN, because it produces good results in pattern recognition

# Remove Points with no transport_mode tag

working_dataset <- working_dataset[working_dataset$transport_mode != "", ]
working_dataset <- working_dataset[working_dataset$transport_mode != "Other1", ]
#Remove any columns with strings
posmo_cnn <- st_drop_geometry(working_dataset)
posmo_cnn <- posmo_cnn[,-c(1,3,4)]

posmo_cnn$transport_mode[posmo_cnn$transport_mode == 'Bike'] <- '1'
posmo_cnn$transport_mode[posmo_cnn$transport_mode == 'Bus'] <- '2'
posmo_cnn$transport_mode[posmo_cnn$transport_mode == 'Car'] <- '3'
posmo_cnn$transport_mode[posmo_cnn$transport_mode == 'Train'] <- '4'
posmo_cnn$transport_mode[posmo_cnn$transport_mode == 'Tram'] <- '5'
posmo_cnn$transport_mode[posmo_cnn$transport_mode == 'Walk'] <- '6'
posmo_cnn$transport_mode <- as.numeric(posmo_cnn$transport_mode, na.omit = T)


```

```{r}
set.seed(100)
posmo_clust <- posmo_cnn[,c(3,7)]
posmo_clust <- scale(posmo_clust)


# Perform k-means clustering
num_clusters <- 6  # Number of clusters
clustering <- kmeans(posmo_clust, centers = num_clusters, algorithm = "Forgy")

# Get the cluster assignments
cluster_result <- data.frame(posmo_cnn[1], clustering$cluster, iter.max = 50)


cluster_result$transport_mode[cluster_result$transport_mode == '1'] <- 'Bike'
cluster_result$transport_mode[cluster_result$transport_mode == '2'] <- 'Bus'
cluster_result$transport_mode[cluster_result$transport_mode == '3'] <- 'Car'
cluster_result$transport_mode[cluster_result$transport_mode == '4'] <- 'Train'
cluster_result$transport_mode[cluster_result$transport_mode == '5'] <- 'Tram'
cluster_result$transport_mode[cluster_result$transport_mode == '6'] <- 'Walk'






# cluster$labelClust[cluster$labelClust == '1'] <- 'Bike'
# cluster$labelClust[cluster$labelClust == '2'] <- 'Bus'
# cluster$labelClust[cluster$labelClust == '3'] <- 'Car'
# cluster$labelClust[cluster$labelClust == '4'] <- 'Train'
# cluster$labelClust[cluster$labelClust == '5'] <- 'Tram'
# cluster$labelClust[cluster$labelClust == '6'] <- 'Walk'
# 
# cluster$transport_mode[cluster$transport_mode == '1'] <- 'Bike'
# cluster$transport_mode[cluster$transport_mode == '2'] <- 'Bus'
# cluster$transport_mode[cluster$transport_mode == '3'] <- 'Car'
# cluster$transport_mode[cluster$transport_mode == '4'] <- 'Train'
# cluster$transport_mode[cluster$transport_mode == '5'] <- 'Tram'
# cluster$transport_mode[cluster$transport_mode == '6'] <- 'Walk'

# posmo_clust_p$transport_mode[posmo_clust_p$transport_mode == '1'] <- 'Bike'
# posmo_clust_p$transport_mode[posmo_clust_p$transport_mode == '2'] <- 'Bus'
# posmo_clust_p$transport_mode[posmo_clust_p$transport_mode == '3'] <- 'Car'
# posmo_clust_p$transport_mode[posmo_clust_p$transport_mode == '4'] <- 'Train'
# posmo_clust_p$transport_mode[posmo_clust_p$transport_mode == '5'] <- 'Tram'
# posmo_clust_p$transport_mode[posmo_clust_p$transport_mode == '6'] <- 'Walk'


```

```{r}
# cluster <- cluster_result |>
#   group_by(clustering.cluster)
# 
# #Add count n
# cluster <- cluster |>
#   group_by(clustering.cluster, transport_mode)|>
#   tally()
# 
# cluster$labelClust <- NA
# 
# for (i in 1:6){
#   cluster_temp <- cluster |> filter(clustering.cluster == i)
#   label <- cluster_temp$transport_mode[which.max(cluster_temp$n)]
#   print(label)
#   cluster$labelClust[cluster_temp$transport_mode == i] <- label
# }
```

```{r}
# Map Cluster to Transport Mode
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '1'] <- 'Bike'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '2'] <- 'Car'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '3'] <- 'Train'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '4'] <- 'Bus'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '5'] <- 'Walk'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '6'] <- 'Tram'

input_plot <- ggplot(cluster_result,aes(transport_mode)) + 
  geom_bar(color = "gray") +
  labs(x = "Output Variable", y = "Frequency", title = "Histogram of Input Variables")

# Print the cluster assignments
output_plot <- ggplot(cluster_result) + 
  geom_bar(aes(clustering.cluster),color = "gray") +
  labs(x = "Output Variable", y = "Frequency", title = "Histogram of Cluster Result")

ggsave("plots/input_plot.png", plot = input_plot, width = 8, height = 6, dpi = 300)
ggsave("plots/output_plot.png", plot = output_plot, width = 8, height = 6, dpi = 300)
output_plot
input_plot


```

```{r confusion matrix}
cluster_result <- na.omit(cluster_result)
(confusion_matrix <- table(cluster_result$transport_mode, cluster_result$clustering.cluster, dnn=c("Predicted, Observed")))
```

```{r Overall Accuracy}
sum(diag(confusion_matrix))/sum(confusion_matrix)
```

```{r CNN Model}
# set.seed(100)
# # Create Training and Test data set
# data_rows <- floor(0.80*nrow(posmo_cnn))
# train_indices <- sample(c(1:nrow(posmo_cnn)), data_rows)
# train_data <- posmo_cnn[train_indices,]
# test_data <- posmo_cnn[-train_indices,]
# 
# model <- neuralnet((transport_mode == 1) + (transport_mode == 2) + (transport_mode == 3) + 
#                      (transport_mode == 4) + (transport_mode == 5) + (transport_mode == 6) ~ velocity + sinuosity,
#                   data = train_data,
#                   hidden = c(3,2),
#                   lifesign.step = 1000,
#                   linear.output = T)
# 
# 
```

```{r prediction}

# pred <- predict(model, test_data, rep = 1)
# 
# labels <- unique(posmo_cnn$transport_mode)
# prediction_label <- data.frame(max.col(pred)) |>
#   mutate(pred = labels[max.col.pred.]) |>
#   select(2) |>
#   unlist()
# 
# table(test_data$transport_mode, prediction_label)

```

```{r}
(unique(working_dataset$transport_mode))

```

# 6. Evaluation

# Visualisation

```{r vis}
visual <- data.frame(st_coordinates(working_dataset), working_dataset$velocity, working_dataset$acceleration, working_dataset$sinuosity)

visual|> ggplot() +
  geom_point(aes(X,Y,color = working_dataset.velocity))

visual|> ggplot() +
  geom_point(aes(X,Y,color = working_dataset.acceleration))

visual|> ggplot() +
  geom_point(aes(X,Y,color = working_dataset.sinuosity))

ggplot(working_dataset, aes(id,sinuosity)) +
  geom_point()

cluster_result <- mutate(cluster_result, id = row_number())
working_dataset <- mutate(working_dataset, id = row_number())

cluster_join <- left_join(cluster_result, working_dataset, by = "id" )

cluster_join$correct <- cluster_join$clustering.cluster == cluster_join$transport_mode.x
cluster_join <- data.frame(cluster_join,st_coordinates(working_dataset))
map_plot <- ggplot(cluster_join) +
  geom_point(aes(X, Y, colour = correct), size = 1, alpha = 0.2)

truefalse <- ggplot(cluster_join)+
  geom_bar(aes(correct, fill = correct))

ggsave("plots/truefalse.png", plot = truefalse, width = 8, height = 6, dpi = 300)
ggsave("plots/map_plot.png", plot = map_plot, width = 8, height = 6, dpi = 300)
  
```
