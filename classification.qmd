---
title: "classification"
author: "Cyril Geistlich & Micha Franz"
format: html
editor: source
---

# 4. Cluster
```{r}
working_dataset <- working_dataset_copy
```


```{r Data preparation}

# Drop geom
working_dataset <- st_drop_geometry(working_dataset)

# Set threshold for parameters
working_dataset <- working_dataset[working_dataset$velocity < 250,]
working_dataset <- working_dataset[working_dataset$sinuosity < 5,]
working_dataset <- working_dataset[working_dataset$acceleration < 20,]
working_dataset <- working_dataset[working_dataset$diff_s < 1000,]

# Filter unwanted categories
working_dataset <- working_dataset[working_dataset$transport_mode != "", ]
working_dataset <- working_dataset[working_dataset$transport_mode != "Other1", ]

working_dataset <- working_dataset[,-c(1,4)]

# Scale data
working_dataset <- data.frame(working_dataset[,c(1,2)],scale(working_dataset[,c(3:11)])) |>
  mutate(id = row_number())


```

```{r}
# Resampling 


```

# 5. k-means

```{r}

#Oversampling
# Create a resampling object with desired method
resample_control <- trainControl(method = "SMOTE",  # Choose the desired resampling method: "up", "down", "SMOTE", etc.
                                summaryFunction = twoClassSummary,  # For binary classification, adjust as needed
                                classProbs = TRUE,
                                verboseIter = FALSE)

# Use the resample method with desired formula and data
working_dataset <- caret::resample(transport_mode ~ .,  # Adjust the formula as needed
                                 data = working_dataset,
                                 method = "whatever_model",  # Choose the desired model to perform resampling
                                 trControl = resample_control)
# Perform k-means clustering
num_clusters <- 3  # Number of clusters
result_kmeans <- kmeans(working_dataset[,c(3,7)], centers = num_clusters, algorithm = "Forgy")

# Get the cluster assignments
kmeans_cluster <- data.frame(result_kmeans[1]) |>
  mutate(id = row_number())

kmeans_cluster <- left_join(kmeans_cluster,working_dataset, by = "id")

```



```{r}
# Calculate the most common cluster for each label
# kmeans_labels <- kmeans_cluster %>%
#   group_by(transport_mode) %>%
#   summarise(most_common_cluster = mode(cluster)) %>%
#   ungroup()

kmeans_labels <- kmeans_cluster %>%
  count(transport_mode, cluster) %>%
  group_by(transport_mode)

# Print the cluster-label assig
print(kmeans_labels)

```

```{r}
# working_dataset$c_transport_mode <- cluster_result$clustering.cluster
# 
# mapview(working_dataset, zcol="c_transport_mode") +
#   mapview(working_dataset, zcol = "transport_mode")
```

```{r}
cluster <- cluster_result |>
  group_by(clustering.cluster)

#Add count n
cluster <- cluster |>
  group_by(clustering.cluster, transport_mode)|>
  tally()

cluster$labelClust <- NA

for (i in 1:3){
  cluster_temp <- cluster |> filter(clustering.cluster == i)
  label <- cluster_temp$transport_mode[which.max(cluster_temp$n)]
  print(label)
  cluster$labelClust[cluster_temp$transport_mode == i] <- label
}
```

```{r}
# Map Cluster to Transport Mode
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '1'] <- 'Bike'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '2'] <- 'Car'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '3'] <- 'Train'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '4'] <- 'Bus'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '5'] <- 'Walk'
cluster_result$clustering.cluster[cluster_result$clustering.cluster == '6'] <- 'Tram'

input_plot <- ggplot(cluster_result,aes(transport_mode)) + 
  geom_bar(color = "gray") +
  labs(x = "Output Variable", y = "Frequency", title = "Histogram of Input Variables")

# Print the cluster assignments
output_plot <- ggplot(cluster_result) + 
  geom_bar(aes(clustering.cluster),color = "gray") +
  labs(x = "Output Variable", y = "Frequency", title = "Histogram of Cluster Result")

ggsave("plots/input_plot.png", plot = input_plot, width = 8, height = 6, dpi = 300)
ggsave("plots/output_plot.png", plot = output_plot, width = 8, height = 6, dpi = 300)
output_plot
input_plot
```

```{r confusion matrix}
cluster_result <- na.omit(cluster_result)
(confusion_matrix <- table(cluster_result$transport_mode, cluster_result$clustering.cluster, dnn=c("Predicted, Observed")))
```

```{r Overall Accuracy}
sum(diag(confusion_matrix))/sum(confusion_matrix)
```

```{r CNN Model}
# set.seed(100)
# # Create Training and Test data set
# data_rows <- floor(0.80*nrow(posmo_cnn))
# train_indices <- sample(c(1:nrow(posmo_cnn)), data_rows)
# train_data <- posmo_cnn[train_indices,]
# test_data <- posmo_cnn[-train_indices,]
# 
# model <- neuralnet((transport_mode == 1) + (transport_mode == 2) + (transport_mode == 3) + 
#                      (transport_mode == 4) + (transport_mode == 5) + (transport_mode == 6) ~ velocity + sinuosity,
#                   data = train_data,
#                   hidden = c(3,2),
#                   lifesign.step = 1000,
#                   linear.output = T)
# 
# 
```

```{r prediction}

# pred <- predict(model, test_data, rep = 1)
# 
# labels <- unique(posmo_cnn$transport_mode)
# prediction_label <- data.frame(max.col(pred)) |>
#   mutate(pred = labels[max.col.pred.]) |>
#   select(2) |>
#   unlist()
# 
# table(test_data$transport_mode, prediction_label)

```

```{r}
(unique(working_dataset$transport_mode))

```

# 6. Evaluation

# Visualisation

```{r vis}
visual <- data.frame(st_coordinates(working_dataset), working_dataset$velocity, working_dataset$acceleration, working_dataset$sinuosity)

visual|> ggplot() +
  geom_point(aes(X,Y,color = working_dataset.velocity))

visual|> ggplot() +
  geom_point(aes(X,Y,color = working_dataset.acceleration))

visual|> ggplot() +
  geom_point(aes(X,Y,color = working_dataset.sinuosity))

ggplot(working_dataset, aes(id,sinuosity)) +
  geom_point()

cluster_result <- mutate(cluster_result, id = row_number())
working_dataset <- mutate(working_dataset, id = row_number())

cluster_join <- left_join(cluster_result, working_dataset, by = "id" )

cluster_join$correct <- cluster_join$clustering.cluster == cluster_join$transport_mode.x
cluster_join <- data.frame(cluster_join,st_coordinates(working_dataset))
map_plot <- ggplot(cluster_join) +
  geom_point(aes(X, Y, colour = correct), size = 1, alpha = 0.2)

truefalse <- ggplot(cluster_join)+
  geom_bar(aes(correct, fill = correct))

ggsave("plots/truefalse.png", plot = truefalse, width = 8, height = 6, dpi = 300)
ggsave("plots/map_plot.png", plot = map_plot, width = 8, height = 6, dpi = 300)
  
```